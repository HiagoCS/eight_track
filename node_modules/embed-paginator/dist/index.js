"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaginatedEmbed = void 0;
const discord_js_1 = require("discord.js");
const paginationTypeList = ['description', 'field', 'both'];
class PaginatedEmbed {
    constructor(options) {
        this.pages = [];
        this.currentPage = 1;
        this.paginate = true;
        if (paginationTypeList.indexOf(options.paginationType) === -1) {
            throw new Error('An invalid pagination type has been passed. Valid pagination types: description, field, both.');
        }
        this.options = options;
        this.options.showFirstLastBtns =
            typeof options.showFirstLastBtns === 'undefined' ? true : options.showFirstLastBtns;
        this.messageEmbed = new discord_js_1.EmbedBuilder();
        this.setupPages(options);
        this.changePage();
    }
    setupPages(items) {
        var _a, _b, _c, _d, _e, _f, _g;
        return __awaiter(this, void 0, void 0, function* () {
            const authors = items.authors ? [...items.authors] : [];
            const titles = items.titles ? [...items.titles] : [];
            const urls = items.urls ? [...items.urls] : [];
            const colours = items.colours ? [...items.colours] : [];
            const descriptions = items.descriptions ? [...items.descriptions] : [];
            const fields = items.fields ? [...items.fields] : [];
            const images = items.images ? [...items.images] : [];
            const footers = items.footers ? [...items.footers] : [];
            const thumbnails = items.thumbnails ? [...items.thumbnails] : [];
            const pages = [];
            while (colours.length > 0 || descriptions.length > 0 || (fields === null || fields === void 0 ? void 0 : fields.length) > 0) {
                let pageDescriptions;
                let pageFields;
                if (this.options.paginationType === 'field') {
                    if (!this.options.fields || this.options.fields.length < this.options.itemsPerPage) {
                        this.paginate = false;
                    }
                    else {
                        this.paginate = true;
                    }
                    descriptions === null || descriptions === void 0 ? void 0 : descriptions.splice(0, descriptions === null || descriptions === void 0 ? void 0 : descriptions.length);
                    pageDescriptions = items.descriptions;
                    pageFields = fields.splice(0, this.options.itemsPerPage);
                }
                if (this.options.paginationType === 'description') {
                    if (!this.options.descriptions || this.options.descriptions.length < this.options.itemsPerPage) {
                        this.paginate = false;
                    }
                    else {
                        this.paginate = true;
                    }
                    fields === null || fields === void 0 ? void 0 : fields.splice(0, fields === null || fields === void 0 ? void 0 : fields.length);
                    pageDescriptions = descriptions.splice(0, this.options.itemsPerPage);
                    pageFields = items.fields;
                }
                if (this.options.paginationType === 'both') {
                    if ((!this.options.descriptions || this.options.descriptions.length === 0) &&
                        (!this.options.fields || this.options.fields.length === 0)) {
                        this.paginate = false;
                    }
                    else {
                        this.paginate = true;
                    }
                    pageDescriptions = descriptions === null || descriptions === void 0 ? void 0 : descriptions.splice(0, this.options.itemsPerPage);
                    pageFields = fields === null || fields === void 0 ? void 0 : fields.splice(0, this.options.itemsPerPage);
                }
                const page = {
                    authors: authors.length > 0 ? authors.splice(0, 1) : ((_a = pages[pages.length - 1]) === null || _a === void 0 ? void 0 : _a.authors) || [],
                    titles: titles.length > 0 ? titles.splice(0, 1) : ((_b = pages[pages.length - 1]) === null || _b === void 0 ? void 0 : _b.titles) || [''],
                    urls: urls.length > 0 ? urls.splice(0, 1) : ((_c = pages[pages.length - 1]) === null || _c === void 0 ? void 0 : _c.urls) || [''],
                    colours: colours.length > 0 ? colours.splice(0, 1) : ((_d = pages[pages.length - 1]) === null || _d === void 0 ? void 0 : _d.colours) || ['Random'],
                    descriptions: pageDescriptions,
                    fields: pageFields,
                    images: images.length > 0 ? images.splice(0, 1) : ((_e = pages[pages.length - 1]) === null || _e === void 0 ? void 0 : _e.images) || [undefined],
                    footers: footers.length > 0 ? footers.splice(0, 1) : ((_f = pages[pages.length - 1]) === null || _f === void 0 ? void 0 : _f.footers) || [undefined],
                    thumbnails: thumbnails.length > 0 ? thumbnails.splice(0, 1) : ((_g = pages[pages.length - 1]) === null || _g === void 0 ? void 0 : _g.thumbnails) || [undefined]
                };
                pages.push(page);
            }
            this.pages = pages;
        });
    }
    changePage() {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            this.messageEmbed.setColor(((_a = this.pages[this.currentPage - 1]) === null || _a === void 0 ? void 0 : _a.colours[0]) || 'Random');
            const currentPage = `${this.currentPage}`;
            const maxPage = `${this.pages.length === 0 ? 1 : this.pages.length}`;
            const pageNumber = `Page ${currentPage} of ${maxPage}`;
            const footer = (_c = (_b = this.pages[this.currentPage - 1]) === null || _b === void 0 ? void 0 : _b.footers[0]) === null || _c === void 0 ? void 0 : _c.text.replace(/{page}/gi, pageNumber).replace(/{curPage}/gi, currentPage).replace(/{maxPage}/gi, maxPage);
            this.messageEmbed.setFooter({
                text: footer || pageNumber,
                iconURL: (_e = (_d = this.pages[this.currentPage - 1]) === null || _d === void 0 ? void 0 : _d.footers[0]) === null || _e === void 0 ? void 0 : _e.iconURL
            });
            if (this.options.descriptions) {
                this.messageEmbed.setDescription(this.pages[this.currentPage - 1].descriptions.join('\n'));
            }
            if (this.options.fields) {
                this.messageEmbed.spliceFields(0, ((_f = this.messageEmbed.data.fields) === null || _f === void 0 ? void 0 : _f.length) || 0, ...this.pages[this.currentPage - 1].fields);
            }
            if (this.options.authors) {
                const author = this.pages[this.currentPage - 1].authors[0];
                if (author) {
                    this.messageEmbed.setAuthor(author);
                }
            }
            if (this.options.titles) {
                const title = this.pages[this.currentPage - 1].titles[0];
                if (title) {
                    this.messageEmbed.setTitle(title);
                }
            }
            if (this.options.urls) {
                this.messageEmbed.setURL(this.pages[this.currentPage - 1].urls[0] || undefined);
            }
            if (this.options.thumbnails) {
                this.messageEmbed.setThumbnail(this.pages[this.currentPage - 1].thumbnails[0]);
            }
            if (this.options.images) {
                this.messageEmbed.setImage(this.pages[this.currentPage - 1].images[0]);
            }
        });
    }
    setTitles(titles) {
        this.options.titles = titles;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    setDescriptions(descriptions) {
        this.options.descriptions = descriptions;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    setFields(fields) {
        this.options.fields = fields;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    setColours(colours) {
        this.options.colours = colours;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    spliceFields(index, deleteCount, fields) {
        this.options.fields.splice(index, deleteCount, ...(fields || []));
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    setFooters(footers) {
        this.options.footers = footers;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    setImages(urls) {
        this.options.images = urls;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    setThumbnails(urls) {
        this.options.thumbnails = urls;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    setAuthors(authors) {
        this.options.authors = authors;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    setTimestamp(timestamp) {
        this.messageEmbed.setTimestamp(timestamp);
        return this;
    }
    setURLs(urls) {
        this.options.urls = urls;
        this.setupPages(this.options);
        if (!this.embedMsg || !this.embedMsg.editedAt) {
            this.changePage();
        }
        return this;
    }
    toJSON() {
        return this.pages.reduce((acc, page, index) => {
            acc[`${index + 1}`] = page;
            return acc;
        }, {});
    }
    get fields() {
        return this.options.fields;
    }
    get descriptions() {
        return this.options.descriptions;
    }
    get colours() {
        return this.options.colours;
    }
    send({ message, options: { interaction, ephemeral, followUp, channel, components } }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (interaction && !interaction.isRepliable())
                throw new Error('Interaction cannot be replied to.');
            channel = (interaction === null || interaction === void 0 ? void 0 : interaction.channel) || channel;
            if (!channel) {
                throw new Error('Please provide either an interaction or channel.');
            }
            const btnsRow = new discord_js_1.ActionRowBuilder();
            if (this.options.showFirstLastBtns) {
                const firstBtn = new discord_js_1.ButtonBuilder()
                    .setCustomId('firstBtn')
                    .setLabel(this.options.firstBtn || 'First')
                    .setStyle(discord_js_1.ButtonStyle.Primary);
                if (this.options.useEmoji)
                    firstBtn.setEmoji('⏮️');
                btnsRow.addComponents(firstBtn);
            }
            const prevBtn = new discord_js_1.ButtonBuilder()
                .setCustomId('prevBtn')
                .setLabel(this.options.prevBtn || 'Back')
                .setStyle(discord_js_1.ButtonStyle.Primary);
            const nextBtn = new discord_js_1.ButtonBuilder()
                .setCustomId('nextBtn')
                .setLabel(this.options.nextBtn || 'Next')
                .setStyle(discord_js_1.ButtonStyle.Primary);
            if (this.options.useEmoji) {
                prevBtn.setEmoji(this.options.useEmoji ? '◀️' : undefined);
                nextBtn.setEmoji(this.options.useEmoji ? '▶️' : undefined);
            }
            btnsRow.addComponents(prevBtn, nextBtn);
            if (this.options.showFirstLastBtns) {
                const lastBtn = new discord_js_1.ButtonBuilder()
                    .setCustomId('lastBtn')
                    .setLabel(this.options.lastBtn || 'Last')
                    .setStyle(discord_js_1.ButtonStyle.Primary);
                if (this.options.useEmoji)
                    lastBtn.setEmoji('⏭️');
                btnsRow.addComponents(lastBtn);
            }
            let msg;
            if (interaction) {
                if (interaction.isRepliable()) {
                    if (followUp) {
                        msg = (yield interaction.followUp({
                            content: message,
                            embeds: [this.messageEmbed],
                            components: this.paginate ? [btnsRow, ...(components || [])] : [...(components || [])],
                            ephemeral
                        }));
                    }
                    else {
                        msg = (yield interaction.reply({
                            content: message,
                            embeds: [this.messageEmbed],
                            components: this.paginate ? [btnsRow, ...(components || [])] : [...(components || [])],
                            fetchReply: true,
                            ephemeral
                        }));
                    }
                }
                else {
                    throw new Error(`The interaction ${interaction.id} passed as argument cannot be replied to.`);
                }
            }
            else {
                msg = yield channel.send({
                    content: message,
                    embeds: [this.messageEmbed],
                    components: this.paginate ? [btnsRow, ...(components || [])] : [...(components || [])]
                });
            }
            if (!this.paginate)
                return msg;
            const filter = (i) => {
                return ((i.customId === 'nextBtn' ||
                    i.customId === 'prevBtn' ||
                    i.customId === 'firstBtn' ||
                    i.customId === 'lastBtn') &&
                    (typeof interaction !== 'undefined' ? i.user.id === interaction.user.id : !i.user.bot));
            };
            let collector;
            if (this.options.duration) {
                collector = msg.createMessageComponentCollector({
                    filter,
                    componentType: discord_js_1.ComponentType.Button,
                    time: this.options.duration
                });
            }
            else {
                collector = msg.createMessageComponentCollector({
                    filter,
                    componentType: discord_js_1.ComponentType.Button
                });
            }
            collector.on('collect', (i) => __awaiter(this, void 0, void 0, function* () {
                if (this.pages.length < 2) {
                    this.currentPage = 1;
                    yield this.changePage();
                    if (interaction) {
                        yield i.editReply({
                            embeds: [this.messageEmbed]
                        });
                    }
                    else {
                        yield msg.edit({
                            embeds: [this.messageEmbed]
                        });
                    }
                }
                const action = i.customId;
                switch (action) {
                    case 'firstBtn':
                        this.currentPage = 1;
                        yield i.update({ embeds: [this.messageEmbed] });
                        break;
                    case 'nextBtn':
                        this.currentPage === this.pages.length ? (this.currentPage = 1) : this.currentPage++;
                        yield i.update({ embeds: [this.messageEmbed] });
                        break;
                    case 'prevBtn':
                        this.currentPage === 1 ? (this.currentPage = this.pages.length) : this.currentPage--;
                        yield i.update({ embeds: [this.messageEmbed] });
                        break;
                    case 'lastBtn':
                        this.currentPage = this.pages.length;
                        yield i.update({ embeds: [this.messageEmbed] });
                        break;
                }
                yield this.changePage();
                if (interaction) {
                    yield i.editReply({
                        embeds: [this.messageEmbed]
                    });
                }
                else {
                    yield msg.edit({
                        embeds: [this.messageEmbed]
                    });
                }
            }));
            collector.on('end', (i, reason) => {
                if (reason === 'messageDelete')
                    return;
                i.forEach((int) => int.editReply({ components: [] }));
            });
            this.embedMsg = msg;
            return msg;
        });
    }
}
exports.PaginatedEmbed = PaginatedEmbed;
