import { ColorResolvable, Interaction, Message, TextChannel, APIEmbedField, MessageActionRowComponentBuilder, MessageActionRowComponentData, ActionRowData, JSONEncodable, APIActionRowComponent, APIMessageActionRowComponent, EmbedFooterOptions, EmbedAuthorOptions } from 'discord.js';
declare const paginationTypeList: readonly ["description", "field", "both"];
declare type paginationType = typeof paginationTypeList[number];
interface EmbedItems {
    authors?: EmbedAuthorOptions[];
    titles?: string[];
    urls?: string[];
    colours?: ColorResolvable[];
    descriptions?: string[];
    fields?: APIEmbedField[];
    images?: string[];
    footers?: EmbedFooterOptions[];
    thumbnails?: string[];
}
interface EmbedOptions extends EmbedItems {
    duration?: number;
    itemsPerPage: number;
    paginationType: paginationType;
    nextBtn?: string;
    prevBtn?: string;
    firstBtn?: string;
    lastBtn?: string;
    showFirstLastBtns?: boolean;
    useEmoji?: boolean;
}
interface SendOptions {
    message?: string;
    options: {
        interaction?: Interaction;
        ephemeral?: boolean;
        followUp?: boolean;
        channel?: TextChannel;
        components?: (JSONEncodable<APIActionRowComponent<APIMessageActionRowComponent>> | ActionRowData<MessageActionRowComponentData | MessageActionRowComponentBuilder> | APIActionRowComponent<APIMessageActionRowComponent>)[];
    };
}
export declare class PaginatedEmbed {
    private options;
    private messageEmbed;
    private pages;
    private currentPage;
    private paginate;
    private embedMsg;
    constructor(options: EmbedOptions);
    private setupPages;
    private changePage;
    setTitles(titles: string[]): this;
    setDescriptions(descriptions: string[]): this;
    setFields(fields: APIEmbedField[]): this;
    setColours(colours: ColorResolvable[]): this;
    spliceFields(index: number, deleteCount: number, fields?: APIEmbedField[]): this;
    setFooters(footers: EmbedFooterOptions[]): this;
    setImages(urls: string[]): this;
    setThumbnails(urls: string[]): this;
    setAuthors(authors: EmbedAuthorOptions[]): this;
    setTimestamp(timestamp?: Date | number): this;
    setURLs(urls: string[]): this;
    toJSON(): EmbedItems;
    get fields(): APIEmbedField[];
    get descriptions(): string[];
    get colours(): ColorResolvable[];
    send({ message, options: { interaction, ephemeral, followUp, channel, components } }: SendOptions): Promise<Message<boolean>>;
}
export {};
